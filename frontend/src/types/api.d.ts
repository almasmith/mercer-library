/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/books/{id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Record a book read event
         * @description Records a read event for the specified book owned by the authenticated user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Read recorded */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Book not found or not owned */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Analytics/avg-rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Average rating by month
         * @description Returns average book rating grouped by month within the optional date range.
         */
        get: {
            parameters: {
                query?: {
                    bucket?: string;
                    from?: string;
                    to?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Averages calculated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example [
                         *       {
                         *         "bucket": "2025-08",
                         *         "average": 4.25
                         *       },
                         *       {
                         *         "bucket": "2025-09",
                         *         "average": 3.8
                         *       }
                         *     ] */
                        "application/json": components["schemas"]["AvgRatingBucketDto"][];
                    };
                };
                /** @description Validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "One or more validation errors occurred.",
                         *       "status": 400,
                         *       "errors": {
                         *         "email": [
                         *           "A user with that email already exists."
                         *         ]
                         *       }
                         *     } */
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Analytics/most-read-genres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Most read genres
         * @description Returns most read genres sorted by read count descending, then genre ascending (case-insensitive).
         */
        get: {
            parameters: {
                query?: {
                    from?: string;
                    to?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Genres calculated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example [
                         *       {
                         *         "genre": "Fantasy",
                         *         "readCount": 12
                         *       },
                         *       {
                         *         "genre": "Mystery",
                         *         "readCount": 12
                         *       },
                         *       {
                         *         "genre": "Classics",
                         *         "readCount": 5
                         *       }
                         *     ] */
                        "application/json": components["schemas"]["MostReadGenreDto"][];
                    };
                };
                /** @description Validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "One or more validation errors occurred.",
                         *       "status": 400,
                         *       "errors": {
                         *         "email": [
                         *           "A user with that email already exists."
                         *         ]
                         *       }
                         *     } */
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Creates a user and returns a JWT access token.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    /** @example {
                     *       "email": "test@example.com",
                     *       "password": "Passw0rd!"
                     *     } */
                    "application/json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description Registration successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                         *       "expiresIn": 3600
                         *     } */
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "One or more validation errors occurred.",
                         *       "status": 400,
                         *       "errors": {
                         *         "email": [
                         *           "A user with that email already exists."
                         *         ]
                         *       }
                         *     } */
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login with credentials
         * @description Validates credentials and returns a JWT access token.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    /** @example {
                     *       "email": "test@example.com",
                     *       "password": "Passw0rd!"
                     *     } */
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                         *       "expiresIn": 3600
                         *     } */
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "One or more validation errors occurred.",
                         *       "status": 400,
                         *       "errors": {
                         *         "email": [
                         *           "A user with that email already exists."
                         *         ]
                         *       }
                         *     } */
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Books": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List books
         * @description Lists books for the authenticated user with filtering, sorting, and pagination.
         */
        get: {
            parameters: {
                query?: {
                    Genre?: string;
                    MinRating?: number;
                    MaxRating?: number;
                    PublishedFrom?: string;
                    PublishedTo?: string;
                    Search?: string;
                    SortBy?: string;
                    SortOrder?: string;
                    Page?: number;
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Books listed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BookDtoPagedResult"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a book
         * @description Creates a new book for the authenticated user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateBookRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BookDto"];
                    };
                };
                /** @description Validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "One or more validation errors occurred.",
                         *       "status": 400,
                         *       "errors": {
                         *         "email": [
                         *           "A user with that email already exists."
                         *         ]
                         *       }
                         *     } */
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Books/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a book
         * @description Gets a book by id for the authenticated user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Book found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BookDto"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Book not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        /**
         * Update a book
         * @description Updates an existing book by id for the authenticated user.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateBookRequest"];
                };
            };
            responses: {
                /** @description Book updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BookDto"];
                    };
                };
                /** @description Validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "One or more validation errors occurred.",
                         *       "status": 400,
                         *       "errors": {
                         *         "email": [
                         *           "A user with that email already exists."
                         *         ]
                         *       }
                         *     } */
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Book not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a book
         * @description Deletes a book by id for the authenticated user.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Book deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Book not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Books/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Book stats by genre
         * @description Returns genre counts for the authenticated user. Excludes empty/null genres. Case-insensitive grouping with whitespace trimming.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Stats calculated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BookGenreCountDto"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/books/{id}/favorite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Favorite a book
         * @description Favorites a book that you own. Idempotent: returns 204 even if already favorited.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Favorited */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Book not found or not owned */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        /**
         * Unfavorite a book
         * @description Removes a book from favorites. Idempotent: returns 204 even if already not favorited.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Unfavorited */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Book not found or not owned */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List favorite books
         * @description Returns a paged list of favorited books honoring filters, sort, and paging.
         */
        get: {
            parameters: {
                query?: {
                    Genre?: string;
                    MinRating?: number;
                    MaxRating?: number;
                    PublishedFrom?: string;
                    PublishedTo?: string;
                    Search?: string;
                    SortBy?: string;
                    SortOrder?: string;
                    Page?: number;
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Favorites listed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BookDtoPagedResult"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/WeatherForecast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetWeatherForecast"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthResponse: {
            accessToken?: string | null;
            /** Format: int32 */
            expiresIn?: number;
        };
        AvgRatingBucketDto: {
            bucket?: string | null;
            /** Format: double */
            average?: number;
        };
        BookDto: {
            /** Format: uuid */
            id?: string;
            title?: string | null;
            author?: string | null;
            genre?: string | null;
            /** Format: date-time */
            publishedDate?: string;
            /** Format: int32 */
            rating?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        BookDtoPagedResult: {
            items?: components["schemas"]["BookDto"][] | null;
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalItems?: number;
            /** Format: int32 */
            totalPages?: number;
        };
        BookGenreCountDto: {
            genre?: string | null;
            /** Format: int32 */
            count?: number;
        };
        CreateBookRequest: {
            title?: string | null;
            author?: string | null;
            genre?: string | null;
            /** Format: date-time */
            publishedDate?: string;
            /** Format: int32 */
            rating?: number;
        };
        LoginRequest: {
            /** Format: email */
            email: string;
            password: string;
        };
        MostReadGenreDto: {
            genre?: string | null;
            /** Format: int32 */
            readCount?: number;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        RegisterRequest: {
            /** Format: email */
            email: string;
            password: string;
        };
        UpdateBookRequest: {
            title?: string | null;
            author?: string | null;
            genre?: string | null;
            /** Format: date-time */
            publishedDate?: string;
            /** Format: int32 */
            rating?: number;
        };
        ValidationProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
            errors?: {
                [key: string]: string[];
            } | null;
        } & {
            [key: string]: unknown;
        };
        WeatherForecast: {
            /** Format: date */
            date?: string;
            /** Format: int32 */
            temperatureC?: number;
            /** Format: int32 */
            readonly temperatureF?: number;
            summary?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetWeatherForecast: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["WeatherForecast"][];
                    "application/json": components["schemas"]["WeatherForecast"][];
                    "text/json": components["schemas"]["WeatherForecast"][];
                };
            };
        };
    };
}
